{"version":3,"file":"threadx-core-worker-527ba18e.js","sources":["../../node_modules/.pnpm/@lightningjs+renderer@0.5.0/node_modules/@lightningjs/renderer/dist/src/render-drivers/threadx/worker/ThreadXRendererNode.js","../../node_modules/.pnpm/@lightningjs+renderer@0.5.0/node_modules/@lightningjs/renderer/dist/src/render-drivers/threadx/ThreadXRendererMessage.js","../../node_modules/.pnpm/@lightningjs+renderer@0.5.0/node_modules/@lightningjs/renderer/dist/src/render-drivers/threadx/worker/ThreadXRendererTextNode.js","../../node_modules/.pnpm/@lightningjs+renderer@0.5.0/node_modules/@lightningjs/renderer/dist/src/render-drivers/threadx/worker/renderer.js"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SharedNode } from '../SharedNode.js';\nimport { ThreadX } from '@lightningjs/threadx';\nimport { assertTruthy } from '../../../utils.js';\nimport { CoreAnimation } from '../../../core/animations/CoreAnimation.js';\nimport { CoreAnimationController } from '../../../core/animations/CoreAnimationController.js';\nimport { CoreNode } from '../../../core/CoreNode.js';\nexport class ThreadXRendererNode extends SharedNode {\n    stage;\n    coreNode;\n    _parent = null;\n    _children = [];\n    texture = null;\n    animationControllers = new Map();\n    constructor(stage, sharedNodeStruct, coreNode, extendedCurProps) {\n        super(sharedNodeStruct, extendedCurProps);\n        this.stage = stage;\n        // This Proxy makes sure properties on the coreNode that an animation\n        // changes are also updated on the shared node.\n        // TODO: Improve this pattern because its ugly!!!\n        this.coreNode = new Proxy(coreNode || this.createCoreNode(stage, sharedNodeStruct), {\n            set: (target, prop, value) => {\n                // Only set the numeric properties on the shared node.\n                if (prop !== 'parent' && prop !== 'texture' && prop !== 'shader') {\n                    Reflect.set(this, prop, value);\n                }\n                return Reflect.set(target, prop, value);\n            },\n        });\n        // Set up parent\n        const parent = ThreadX.instance.getSharedObjectById(sharedNodeStruct.parentId);\n        assertTruthy(parent instanceof ThreadXRendererNode || parent === null);\n        this.parent = parent;\n        // Create inbound event listeners\n        // TOOD: Make sure event listeners are removed when the node is destroyed.\n        this.on('createAnimation', (target, { id, props, settings }) => {\n            const animation = new CoreAnimation(this.coreNode, props, settings);\n            animation.on('finished', () => {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                this.emit('animationFinished', {\n                    id: id,\n                    loop: settings.loop,\n                });\n            });\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\n            const controller = new CoreAnimationController(this.stage.animationManager, animation);\n            this.animationControllers.set(id, controller);\n        });\n        this.on('destroyAnimation', (target, { id }) => {\n            this.animationControllers.delete(id);\n        });\n        this.on('startAnimation', (target, { id }) => {\n            this.animationControllers.get(id)?.start();\n        });\n        this.on('stopAnimation', (target, { id }) => {\n            this.animationControllers.get(id)?.stop();\n        });\n        this.on('pauseAnimation', (target, { id }) => {\n            this.animationControllers.get(id)?.pause();\n        });\n        this.on('loadTexture', (target, textureDesc) => {\n            this.coreNode.loadTexture(textureDesc.txType, textureDesc.props, textureDesc.options);\n        });\n        this.on('loadShader', (target, shaderDesc) => {\n            this.coreNode.loadShader(shaderDesc.shType, shaderDesc.props);\n        });\n        this.on('unloadTexture', (target) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-explicit-any\n            this.coreNode.unloadTexture();\n        });\n        // Forward on CoreNode events\n        this.coreNode.on('loaded', (target, payload) => {\n            this.emit('loaded', payload);\n        });\n        this.coreNode.on('failed', (target, payload) => {\n            this.emit('failed', payload);\n        });\n    }\n    onPropertyChange(propName, newValue, oldValue) {\n        if (propName === 'parentId') {\n            const parent = ThreadX.instance.getSharedObjectById(newValue);\n            assertTruthy(parent instanceof ThreadXRendererNode || parent === null);\n            this.parent = parent;\n            return;\n        }\n        else {\n            // @ts-expect-error Ignore readonly assignment errors\n            this.coreNode[propName] =\n                newValue;\n        }\n    }\n    //#region Parent/Child Props\n    get parent() {\n        return this._parent;\n    }\n    set parent(newParent) {\n        const oldParent = this._parent;\n        this._parent = newParent;\n        this.coreNode.parent = newParent?.coreNode ?? null;\n        this.parentId = newParent?.id ?? 0;\n        if (oldParent) {\n            const index = oldParent.children.indexOf(this);\n            assertTruthy(index !== -1, \"ThreadXRendererNode.parent: Node not found in old parent's children!\");\n            oldParent.children.splice(index, 1);\n        }\n        if (newParent) {\n            newParent.children.push(this);\n        }\n    }\n    get children() {\n        return this._children;\n    }\n    //#endregion Parent/Child Props\n    createCoreNode(stage, sharedNodeStruct) {\n        const parent = ThreadX.instance.getSharedObjectById(sharedNodeStruct.parentId);\n        assertTruthy(parent instanceof ThreadXRendererNode || parent === null);\n        const node = new CoreNode(stage, {\n            id: sharedNodeStruct.id,\n            x: sharedNodeStruct.x,\n            y: sharedNodeStruct.y,\n            width: sharedNodeStruct.width,\n            height: sharedNodeStruct.height,\n            alpha: sharedNodeStruct.alpha,\n            clipping: sharedNodeStruct.clipping,\n            color: sharedNodeStruct.color,\n            colorTop: sharedNodeStruct.colorTop,\n            colorBottom: sharedNodeStruct.colorBottom,\n            colorLeft: sharedNodeStruct.colorLeft,\n            colorRight: sharedNodeStruct.colorRight,\n            colorTl: sharedNodeStruct.colorTl,\n            colorTr: sharedNodeStruct.colorTr,\n            colorBl: sharedNodeStruct.colorBl,\n            colorBr: sharedNodeStruct.colorBr,\n            zIndex: sharedNodeStruct.zIndex,\n            zIndexLocked: sharedNodeStruct.zIndexLocked,\n            scaleX: sharedNodeStruct.scaleX,\n            scaleY: sharedNodeStruct.scaleY,\n            mount: sharedNodeStruct.mount,\n            mountX: sharedNodeStruct.mountX,\n            mountY: sharedNodeStruct.mountY,\n            pivot: sharedNodeStruct.pivot,\n            pivotX: sharedNodeStruct.pivotX,\n            pivotY: sharedNodeStruct.pivotY,\n            rotation: sharedNodeStruct.rotation,\n            // These are passed in via message handlers\n            shader: null,\n            shaderProps: null,\n            texture: null,\n            textureOptions: null,\n            // Setup the parent after\n            parent: null,\n        });\n        return node;\n    }\n}\n//# sourceMappingURL=ThreadXRendererNode.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Type guard util for a message sent from the main worker to the renderer worker\n *\n * @param type\n * @param message\n * @returns\n */\nexport function isThreadXRendererMessage(type, message) {\n    return (typeof message === 'object' &&\n        message !== null &&\n        'type' in message &&\n        message.type === type);\n}\n//# sourceMappingURL=ThreadXRendererMessage.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CoreTextNode } from '../../../core/CoreTextNode.js';\nimport { ThreadXRendererNode } from './ThreadXRendererNode.js';\nexport class ThreadXRendererTextNode extends ThreadXRendererNode {\n    constructor(stage, sharedNodeStruct) {\n        super(stage, sharedNodeStruct, new CoreTextNode(stage, {\n            id: sharedNodeStruct.id,\n            // It doesn't matter what these are initially. They will be reset\n            // appropriately via the onPropertyChange() calls below and in the\n            // ThreadXRendererNode constructor.\n            x: sharedNodeStruct.x,\n            y: sharedNodeStruct.y,\n            width: sharedNodeStruct.width,\n            height: sharedNodeStruct.height,\n            alpha: sharedNodeStruct.alpha,\n            clipping: sharedNodeStruct.clipping,\n            color: sharedNodeStruct.color,\n            colorTop: sharedNodeStruct.colorTop,\n            colorBottom: sharedNodeStruct.colorBottom,\n            colorLeft: sharedNodeStruct.colorLeft,\n            colorRight: sharedNodeStruct.colorRight,\n            colorTl: sharedNodeStruct.colorTl,\n            colorTr: sharedNodeStruct.colorTr,\n            colorBl: sharedNodeStruct.colorBl,\n            colorBr: sharedNodeStruct.colorBr,\n            zIndex: sharedNodeStruct.zIndex,\n            zIndexLocked: sharedNodeStruct.zIndexLocked,\n            mount: sharedNodeStruct.mount,\n            mountX: sharedNodeStruct.mountX,\n            mountY: sharedNodeStruct.mountY,\n            pivot: sharedNodeStruct.pivot,\n            pivotX: sharedNodeStruct.pivotX,\n            pivotY: sharedNodeStruct.pivotY,\n            scaleX: sharedNodeStruct.scaleX,\n            scaleY: sharedNodeStruct.scaleY,\n            rotation: sharedNodeStruct.rotation,\n            // These are passed in via message handlers\n            shader: null,\n            shaderProps: null,\n            texture: null,\n            textureOptions: null,\n            // Setup the parent after\n            parent: null,\n            // Text properties\n            text: sharedNodeStruct.text,\n            textRendererOverride: sharedNodeStruct.textRendererOverride,\n            fontSize: sharedNodeStruct.fontSize,\n            fontFamily: sharedNodeStruct.fontFamily,\n            fontWeight: sharedNodeStruct.fontWeight,\n            fontStretch: sharedNodeStruct.fontStretch,\n            fontStyle: sharedNodeStruct.fontStyle,\n            contain: sharedNodeStruct.contain,\n            letterSpacing: sharedNodeStruct.letterSpacing,\n            offsetY: sharedNodeStruct.offsetY,\n            textAlign: sharedNodeStruct.textAlign,\n            scrollable: sharedNodeStruct.scrollable,\n            scrollY: sharedNodeStruct.scrollY,\n            debug: {},\n        }), {\n            text: sharedNodeStruct.text,\n            textRendererOverride: sharedNodeStruct.textRendererOverride,\n            fontSize: sharedNodeStruct.fontSize,\n            fontFamily: sharedNodeStruct.fontFamily,\n            fontWeight: sharedNodeStruct.fontWeight,\n            fontStretch: sharedNodeStruct.fontStretch,\n            fontStyle: sharedNodeStruct.fontStyle,\n            contain: sharedNodeStruct.contain,\n            letterSpacing: sharedNodeStruct.letterSpacing,\n            offsetY: sharedNodeStruct.offsetY,\n            textAlign: sharedNodeStruct.textAlign,\n            scrollable: sharedNodeStruct.scrollable,\n            scrollY: sharedNodeStruct.scrollY,\n        });\n        // Forward on CoreNode events\n        this.on('debug', (target, debug) => {\n            this.coreNode.debug = debug;\n        });\n    }\n}\n//# sourceMappingURL=ThreadXRendererTextNode.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ThreadX, BufferStruct } from '@lightningjs/threadx';\nimport { NodeStruct } from '../NodeStruct.js';\nimport { ThreadXRendererNode } from './ThreadXRendererNode.js';\nimport { Stage } from '../../../core/Stage.js';\nimport { assertTruthy } from '../../../utils.js';\nimport { isThreadXRendererMessage, } from '../ThreadXRendererMessage.js';\nimport { TextNodeStruct } from '../TextNodeStruct.js';\nimport { ThreadXRendererTextNode } from './ThreadXRendererTextNode.js';\nimport { loadCoreExtension } from '../../utils.js';\nlet canvas = null;\nlet stage = null;\nlet rootNode = null;\nconst threadx = ThreadX.init({\n    workerId: 2,\n    workerName: 'renderer',\n    sharedObjectFactory(buffer) {\n        const typeId = BufferStruct.extractTypeId(buffer);\n        if (typeId === NodeStruct.typeId) {\n            const nodeStruct = new NodeStruct(buffer);\n            nodeStruct.parentId = nodeStruct.parentId || 0;\n            const node = nodeStruct.lock(() => {\n                assertTruthy(stage);\n                return new ThreadXRendererNode(stage, nodeStruct);\n            });\n            return node;\n        }\n        else if (typeId === TextNodeStruct.typeId) {\n            const nodeStruct = new TextNodeStruct(buffer);\n            nodeStruct.parentId = nodeStruct.parentId || 0;\n            const node = nodeStruct.lock(() => {\n                assertTruthy(stage);\n                return new ThreadXRendererTextNode(stage, nodeStruct);\n            });\n            return node;\n        }\n        return null;\n    },\n    async onMessage(message) {\n        if (isThreadXRendererMessage('init', message)) {\n            canvas = message.canvas;\n            const nodeStruct = new NodeStruct();\n            stage = new Stage({\n                rootId: nodeStruct.id,\n                appWidth: message.appWidth,\n                appHeight: message.appHeight,\n                deviceLogicalPixelRatio: message.deviceLogicalPixelRatio,\n                devicePhysicalPixelRatio: message.devicePhysicalPixelRatio,\n                clearColor: message.clearColor,\n                canvas,\n                debug: {\n                    monitorTextureCache: false,\n                },\n            });\n            const coreRootNode = stage.root;\n            // We must initialize the root NodeStruct with the same properties from\n            // the CoreNode that the Stage created.\n            Object.assign(nodeStruct, {\n                x: coreRootNode.x,\n                y: coreRootNode.y,\n                width: coreRootNode.width,\n                height: coreRootNode.height,\n                alpha: coreRootNode.alpha,\n                clipping: coreRootNode.clipping,\n                color: coreRootNode.color,\n                colorTop: coreRootNode.colorTop,\n                colorRight: coreRootNode.colorRight,\n                colorBottom: coreRootNode.colorBottom,\n                colorLeft: coreRootNode.colorLeft,\n                colorTl: coreRootNode.colorTl,\n                colorTr: coreRootNode.colorTr,\n                colorBr: coreRootNode.colorBr,\n                colorBl: coreRootNode.colorBl,\n                parentId: coreRootNode.parent?.id ?? 0,\n                zIndex: coreRootNode.zIndex,\n                zIndexLocked: coreRootNode.zIndexLocked,\n                scaleX: coreRootNode.scaleX,\n                scaleY: coreRootNode.scaleY,\n                mount: coreRootNode.mount,\n                mountX: coreRootNode.mountX,\n                mountY: coreRootNode.mountY,\n                pivot: coreRootNode.pivot,\n                pivotX: coreRootNode.pivotX,\n                pivotY: coreRootNode.pivotY,\n                rotation: coreRootNode.rotation,\n            });\n            // Share the root node that was created by the Stage with the main worker.\n            rootNode = new ThreadXRendererNode(stage, nodeStruct, coreRootNode);\n            await threadx.shareObjects('parent', [rootNode]);\n            // Load the Core Extension Module if one was specified.\n            if (message.coreExtensionModule) {\n                await loadCoreExtension(message.coreExtensionModule, stage);\n            }\n            // Return its ID so the main worker can retrieve it from the shared object\n            // store.\n            return rootNode.id;\n        }\n        else if (isThreadXRendererMessage('releaseTexture', message)) {\n            assertTruthy(stage);\n            const txManager = stage.txManager;\n            assertTruthy(txManager);\n            txManager.removeTextureIdFromCache(message.textureDescId);\n        }\n    },\n    onObjectShared(object) {\n        // TBD\n    },\n    onBeforeObjectForgotten(object) {\n        if (object instanceof ThreadXRendererNode) {\n            object.parent = null;\n            object.destroy();\n        }\n    },\n});\n//# sourceMappingURL=renderer.js.map"],"names":["ThreadXRendererNode","SharedNode","stage","sharedNodeStruct","coreNode","extendedCurProps","__publicField","target","prop","value","parent","ThreadX","assertTruthy","id","props","settings","animation","CoreAnimation","controller","CoreAnimationController","_a","textureDesc","shaderDesc","payload","propName","newValue","oldValue","newParent","oldParent","_b","index","CoreNode","isThreadXRendererMessage","type","message","ThreadXRendererTextNode","CoreTextNode","debug","canvas","rootNode","threadx","buffer","typeId","BufferStruct","NodeStruct","nodeStruct","TextNodeStruct","Stage","coreRootNode","loadCoreExtension","txManager","object"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}