{"version":3,"file":"threadx-core-worker-legacy-9826be22.js","sources":["../../node_modules/.pnpm/@lightningjs+renderer@0.4.0/node_modules/@lightningjs/renderer/dist/src/render-drivers/threadx/worker/ThreadXRendererNode.js","../../node_modules/.pnpm/@lightningjs+renderer@0.4.0/node_modules/@lightningjs/renderer/dist/src/render-drivers/threadx/ThreadXRendererMessage.js","../../node_modules/.pnpm/@lightningjs+renderer@0.4.0/node_modules/@lightningjs/renderer/dist/src/render-drivers/threadx/worker/ThreadXRendererTextNode.js","../../node_modules/.pnpm/@lightningjs+renderer@0.4.0/node_modules/@lightningjs/renderer/dist/src/render-drivers/threadx/worker/renderer.js"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SharedNode } from '../SharedNode.js';\nimport { ThreadX } from '@lightningjs/threadx';\nimport { assertTruthy } from '../../../utils.js';\nimport { CoreAnimation } from '../../../core/animations/CoreAnimation.js';\nimport { CoreAnimationController } from '../../../core/animations/CoreAnimationController.js';\nimport { CoreNode } from '../../../core/CoreNode.js';\nexport class ThreadXRendererNode extends SharedNode {\n    stage;\n    coreNode;\n    _parent = null;\n    _children = [];\n    texture = null;\n    animationControllers = new Map();\n    constructor(stage, sharedNodeStruct, coreNode, extendedCurProps) {\n        super(sharedNodeStruct, extendedCurProps);\n        this.stage = stage;\n        // This Proxy makes sure properties on the coreNode that an animation\n        // changes are also updated on the shared node.\n        // TODO: Improve this pattern because its ugly!!!\n        this.coreNode = new Proxy(coreNode || this.createCoreNode(stage, sharedNodeStruct), {\n            set: (target, prop, value) => {\n                // Only set the numeric properties on the shared node.\n                if (prop !== 'parent' && prop !== 'texture' && prop !== 'shader') {\n                    Reflect.set(this, prop, value);\n                }\n                return Reflect.set(target, prop, value);\n            },\n        });\n        // Set up parent\n        const parent = ThreadX.instance.getSharedObjectById(sharedNodeStruct.parentId);\n        assertTruthy(parent instanceof ThreadXRendererNode || parent === null);\n        this.parent = parent;\n        // Create inbound event listeners\n        // TOOD: Make sure event listeners are removed when the node is destroyed.\n        this.on('createAnimation', (target, { id, props, settings }) => {\n            const animation = new CoreAnimation(this.coreNode, props, settings);\n            animation.on('finished', () => {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                this.emit('animationFinished', {\n                    id: id,\n                    loop: settings.loop,\n                });\n            });\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\n            const controller = new CoreAnimationController(this.stage.animationManager, animation);\n            this.animationControllers.set(id, controller);\n        });\n        this.on('destroyAnimation', (target, { id }) => {\n            this.animationControllers.delete(id);\n        });\n        this.on('startAnimation', (target, { id }) => {\n            this.animationControllers.get(id)?.start();\n        });\n        this.on('stopAnimation', (target, { id }) => {\n            this.animationControllers.get(id)?.stop();\n        });\n        this.on('pauseAnimation', (target, { id }) => {\n            this.animationControllers.get(id)?.pause();\n        });\n        this.on('loadTexture', (target, textureDesc) => {\n            this.coreNode.loadTexture(textureDesc.txType, textureDesc.props, textureDesc.options);\n        });\n        this.on('loadShader', (target, shaderDesc) => {\n            this.coreNode.loadShader(shaderDesc.shType, shaderDesc.props);\n        });\n        this.on('unloadTexture', (target) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-explicit-any\n            this.coreNode.unloadTexture();\n        });\n        // Forward on CoreNode events\n        this.coreNode.on('txLoaded', (target, dimensions) => {\n            this.emit('txLoaded', dimensions);\n        });\n        this.coreNode.on('txFailed', (target, error) => {\n            this.emit('txFailed', error);\n        });\n    }\n    onPropertyChange(propName, newValue, oldValue) {\n        if (propName === 'parentId') {\n            const parent = ThreadX.instance.getSharedObjectById(newValue);\n            assertTruthy(parent instanceof ThreadXRendererNode || parent === null);\n            this.parent = parent;\n            return;\n        }\n        else {\n            // @ts-expect-error Ignore readonly assignment errors\n            this.coreNode[propName] =\n                newValue;\n        }\n    }\n    //#region Parent/Child Props\n    get parent() {\n        return this._parent;\n    }\n    set parent(newParent) {\n        const oldParent = this._parent;\n        this._parent = newParent;\n        this.coreNode.parent = newParent?.coreNode ?? null;\n        this.parentId = newParent?.id ?? 0;\n        if (oldParent) {\n            const index = oldParent.children.indexOf(this);\n            assertTruthy(index !== -1, \"ThreadXRendererNode.parent: Node not found in old parent's children!\");\n            oldParent.children.splice(index, 1);\n        }\n        if (newParent) {\n            newParent.children.push(this);\n        }\n    }\n    get children() {\n        return this._children;\n    }\n    //#endregion Parent/Child Props\n    createCoreNode(stage, sharedNodeStruct) {\n        const parent = ThreadX.instance.getSharedObjectById(sharedNodeStruct.parentId);\n        assertTruthy(parent instanceof ThreadXRendererNode || parent === null);\n        const node = new CoreNode(stage, {\n            id: sharedNodeStruct.id,\n            x: sharedNodeStruct.x,\n            y: sharedNodeStruct.y,\n            width: sharedNodeStruct.width,\n            height: sharedNodeStruct.height,\n            alpha: sharedNodeStruct.alpha,\n            clipping: sharedNodeStruct.clipping,\n            color: sharedNodeStruct.color,\n            colorTop: sharedNodeStruct.colorTop,\n            colorBottom: sharedNodeStruct.colorBottom,\n            colorLeft: sharedNodeStruct.colorLeft,\n            colorRight: sharedNodeStruct.colorRight,\n            colorTl: sharedNodeStruct.colorTl,\n            colorTr: sharedNodeStruct.colorTr,\n            colorBl: sharedNodeStruct.colorBl,\n            colorBr: sharedNodeStruct.colorBr,\n            zIndex: sharedNodeStruct.zIndex,\n            zIndexLocked: sharedNodeStruct.zIndexLocked,\n            scale: sharedNodeStruct.scale,\n            mount: sharedNodeStruct.mount,\n            mountX: sharedNodeStruct.mountX,\n            mountY: sharedNodeStruct.mountY,\n            pivot: sharedNodeStruct.pivot,\n            pivotX: sharedNodeStruct.pivotX,\n            pivotY: sharedNodeStruct.pivotY,\n            rotation: sharedNodeStruct.rotation,\n            // These are passed in via message handlers\n            shader: null,\n            shaderProps: null,\n            texture: null,\n            textureOptions: null,\n            // Setup the parent after\n            parent: null,\n        });\n        return node;\n    }\n}\n//# sourceMappingURL=ThreadXRendererNode.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Type guard util for a message sent from the main worker to the renderer worker\n *\n * @param type\n * @param message\n * @returns\n */\nexport function isThreadXRendererMessage(type, message) {\n    return (typeof message === 'object' &&\n        message !== null &&\n        'type' in message &&\n        message.type === type);\n}\n//# sourceMappingURL=ThreadXRendererMessage.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CoreTextNode } from '../../../core/CoreTextNode.js';\nimport { ThreadXRendererNode } from './ThreadXRendererNode.js';\nexport class ThreadXRendererTextNode extends ThreadXRendererNode {\n    constructor(stage, sharedNodeStruct) {\n        super(stage, sharedNodeStruct, new CoreTextNode(stage, {\n            id: sharedNodeStruct.id,\n            // It doesn't matter what these are initially. They will be reset\n            // appropriately via the onPropertyChange() calls below and in the\n            // ThreadXRendererNode constructor.\n            x: sharedNodeStruct.x,\n            y: sharedNodeStruct.y,\n            width: sharedNodeStruct.width,\n            height: sharedNodeStruct.height,\n            alpha: sharedNodeStruct.alpha,\n            clipping: sharedNodeStruct.clipping,\n            color: sharedNodeStruct.color,\n            colorTop: sharedNodeStruct.colorTop,\n            colorBottom: sharedNodeStruct.colorBottom,\n            colorLeft: sharedNodeStruct.colorLeft,\n            colorRight: sharedNodeStruct.colorRight,\n            colorTl: sharedNodeStruct.colorTl,\n            colorTr: sharedNodeStruct.colorTr,\n            colorBl: sharedNodeStruct.colorBl,\n            colorBr: sharedNodeStruct.colorBr,\n            zIndex: sharedNodeStruct.zIndex,\n            zIndexLocked: sharedNodeStruct.zIndexLocked,\n            mount: sharedNodeStruct.mount,\n            mountX: sharedNodeStruct.mountX,\n            mountY: sharedNodeStruct.mountY,\n            pivot: sharedNodeStruct.pivot,\n            pivotX: sharedNodeStruct.pivotX,\n            pivotY: sharedNodeStruct.pivotY,\n            scale: sharedNodeStruct.scale,\n            rotation: sharedNodeStruct.rotation,\n            // These are passed in via message handlers\n            shader: null,\n            shaderProps: null,\n            texture: null,\n            textureOptions: null,\n            // Setup the parent after\n            parent: null,\n            // Text properties\n            text: sharedNodeStruct.text,\n            textRendererOverride: sharedNodeStruct.textRendererOverride,\n            fontSize: sharedNodeStruct.fontSize,\n            fontFamily: sharedNodeStruct.fontFamily,\n            fontWeight: sharedNodeStruct.fontWeight,\n            fontStretch: sharedNodeStruct.fontStretch,\n            fontStyle: sharedNodeStruct.fontStyle,\n            contain: sharedNodeStruct.contain,\n            letterSpacing: sharedNodeStruct.letterSpacing,\n            offsetY: sharedNodeStruct.offsetY,\n            textAlign: sharedNodeStruct.textAlign,\n            scrollable: sharedNodeStruct.scrollable,\n            scrollY: sharedNodeStruct.scrollY,\n            debug: {},\n        }), {\n            text: sharedNodeStruct.text,\n            textRendererOverride: sharedNodeStruct.textRendererOverride,\n            fontSize: sharedNodeStruct.fontSize,\n            fontFamily: sharedNodeStruct.fontFamily,\n            fontWeight: sharedNodeStruct.fontWeight,\n            fontStretch: sharedNodeStruct.fontStretch,\n            fontStyle: sharedNodeStruct.fontStyle,\n            contain: sharedNodeStruct.contain,\n            letterSpacing: sharedNodeStruct.letterSpacing,\n            offsetY: sharedNodeStruct.offsetY,\n            textAlign: sharedNodeStruct.textAlign,\n            scrollable: sharedNodeStruct.scrollable,\n            scrollY: sharedNodeStruct.scrollY,\n        });\n        // Forward on CoreNode events\n        this.coreNode.on('textLoaded', (target, dimensions) => {\n            this.emit('textLoaded', dimensions);\n        });\n        this.coreNode.on('textFailed', (target, error) => {\n            this.emit('textFailed', error);\n        });\n        this.on('debug', (target, debug) => {\n            this.coreNode.debug = debug;\n        });\n    }\n}\n//# sourceMappingURL=ThreadXRendererTextNode.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ThreadX, BufferStruct } from '@lightningjs/threadx';\nimport { NodeStruct } from '../NodeStruct.js';\nimport { ThreadXRendererNode } from './ThreadXRendererNode.js';\nimport { Stage } from '../../../core/Stage.js';\nimport { assertTruthy } from '../../../utils.js';\nimport { isThreadXRendererMessage, } from '../ThreadXRendererMessage.js';\nimport { TextNodeStruct } from '../TextNodeStruct.js';\nimport { ThreadXRendererTextNode } from './ThreadXRendererTextNode.js';\nimport { loadCoreExtension } from '../../utils.js';\nlet canvas = null;\nlet stage = null;\nlet rootNode = null;\nconst threadx = ThreadX.init({\n    workerId: 2,\n    workerName: 'renderer',\n    sharedObjectFactory(buffer) {\n        const typeId = BufferStruct.extractTypeId(buffer);\n        if (typeId === NodeStruct.typeId) {\n            const nodeStruct = new NodeStruct(buffer);\n            nodeStruct.parentId = nodeStruct.parentId || 0;\n            const node = nodeStruct.lock(() => {\n                assertTruthy(stage);\n                return new ThreadXRendererNode(stage, nodeStruct);\n            });\n            return node;\n        }\n        else if (typeId === TextNodeStruct.typeId) {\n            const nodeStruct = new TextNodeStruct(buffer);\n            nodeStruct.parentId = nodeStruct.parentId || 0;\n            const node = nodeStruct.lock(() => {\n                assertTruthy(stage);\n                return new ThreadXRendererTextNode(stage, nodeStruct);\n            });\n            return node;\n        }\n        return null;\n    },\n    async onMessage(message) {\n        if (isThreadXRendererMessage('init', message)) {\n            canvas = message.canvas;\n            const nodeStruct = new NodeStruct();\n            stage = new Stage({\n                rootId: nodeStruct.id,\n                appWidth: message.appWidth,\n                appHeight: message.appHeight,\n                deviceLogicalPixelRatio: message.deviceLogicalPixelRatio,\n                devicePhysicalPixelRatio: message.devicePhysicalPixelRatio,\n                clearColor: message.clearColor,\n                canvas,\n                debug: {\n                    monitorTextureCache: false,\n                },\n            });\n            const coreRootNode = stage.root;\n            // We must initialize the root NodeStruct with the same properties from\n            // the CoreNode that the Stage created.\n            Object.assign(nodeStruct, {\n                x: coreRootNode.x,\n                y: coreRootNode.y,\n                width: coreRootNode.width,\n                height: coreRootNode.height,\n                alpha: coreRootNode.alpha,\n                clipping: coreRootNode.clipping,\n                color: coreRootNode.color,\n                colorTop: coreRootNode.colorTop,\n                colorRight: coreRootNode.colorRight,\n                colorBottom: coreRootNode.colorBottom,\n                colorLeft: coreRootNode.colorLeft,\n                colorTl: coreRootNode.colorTl,\n                colorTr: coreRootNode.colorTr,\n                colorBr: coreRootNode.colorBr,\n                colorBl: coreRootNode.colorBl,\n                parentId: coreRootNode.parent?.id ?? 0,\n                zIndex: coreRootNode.zIndex,\n                zIndexLocked: coreRootNode.zIndexLocked,\n                scale: coreRootNode.scale,\n                mount: coreRootNode.mount,\n                mountX: coreRootNode.mountX,\n                mountY: coreRootNode.mountY,\n                pivot: coreRootNode.pivot,\n                pivotX: coreRootNode.pivotX,\n                pivotY: coreRootNode.pivotY,\n                rotation: coreRootNode.rotation,\n            });\n            // Share the root node that was created by the Stage with the main worker.\n            rootNode = new ThreadXRendererNode(stage, nodeStruct, coreRootNode);\n            await threadx.shareObjects('parent', [rootNode]);\n            // Load the Core Extension Module if one was specified.\n            if (message.coreExtensionModule) {\n                await loadCoreExtension(message.coreExtensionModule, stage);\n            }\n            // Return its ID so the main worker can retrieve it from the shared object\n            // store.\n            return rootNode.id;\n        }\n        else if (isThreadXRendererMessage('releaseTexture', message)) {\n            assertTruthy(stage);\n            const txManager = stage.txManager;\n            assertTruthy(txManager);\n            txManager.removeTextureIdFromCache(message.textureDescId);\n        }\n    },\n    onObjectShared(object) {\n        // TBD\n    },\n    onBeforeObjectForgotten(object) {\n        if (object instanceof ThreadXRendererNode) {\n            object.parent = null;\n            object.destroy();\n        }\n    },\n});\n//# sourceMappingURL=renderer.js.map"],"names":["ThreadXRendererNode","SharedNode","stage","coreNode","_parent","_children","texture","animationControllers","Map","constructor","sharedNodeStruct","extendedCurProps","super","this","Proxy","createCoreNode","set","target","prop","value","Reflect","parent","ThreadX","instance","getSharedObjectById","parentId","assertTruthy","on","id","props","settings","animation","CoreAnimation","emit","loop","controller","CoreAnimationController","animationManager","delete","get","start","stop","pause","textureDesc","loadTexture","txType","options","shaderDesc","loadShader","shType","unloadTexture","dimensions","error","onPropertyChange","propName","newValue","oldValue","newParent","oldParent","index","children","indexOf","splice","push","CoreNode","x","y","width","height","alpha","clipping","color","colorTop","colorBottom","colorLeft","colorRight","colorTl","colorTr","colorBl","colorBr","zIndex","zIndexLocked","scale","mount","mountX","mountY","pivot","pivotX","pivotY","rotation","shader","shaderProps","textureOptions","isThreadXRendererMessage","type","message","ThreadXRendererTextNode","CoreTextNode","text","textRendererOverride","fontSize","fontFamily","fontWeight","fontStretch","fontStyle","contain","letterSpacing","offsetY","textAlign","scrollable","scrollY","debug","canvas","rootNode","threadx","init","workerId","workerName","sharedObjectFactory","buffer","typeId","BufferStruct","extractTypeId","NodeStruct","nodeStruct","lock","TextNodeStruct","onMessage","Stage","rootId","appWidth","appHeight","deviceLogicalPixelRatio","devicePhysicalPixelRatio","clearColor","monitorTextureCache","coreRootNode","root","Object","assign","shareObjects","coreExtensionModule","loadCoreExtension","txManager","removeTextureIdFromCache","textureDescId","onObjectShared","object","onBeforeObjectForgotten","destroy"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}